Análise de Dados em R (FNDE) - Módulo 2
Sessão 5 - Trabalhando com Datas - Lubridate
========================================================
author: Allan Vieira
date: julho de 2018
width: 1440
height: 900
<style>
.small-code pre code {
  font-size: 1em;
}
</style>
<!-- para trazer codigos em caixas menores: -->
<!-- https://stackoverflow.com/questions/25612385/code-box-size-and-font-size-in-rpres -->



Objetivos
========================================================
incremental: true

<br />
<br />
- aprender as principais funções do pacote lubridate;
<br />
<br />
- trabalhar com datas no **R**.






Pacote lubridate - Introdução
========================================================
incremental: true
class: small-code


![](./img/lubridate.jpg)

- trabalhar com datas (e tempos) no base **R** geralmente era um processo frustrante

- as funções "nativas" do **R** para dados do tipo *date-times* são pouco intuitivas e mudam dependendo do tipo de objeto que está sendo usado;

- Datas e tempos têm uma série de especificidades, como por exemplo fusos, anos bissextos, horários de verão, etc;

- Por isso precisamos ter métodos robustos para lidar com esses tipos de peculiaridades; 

- O pacote **lubridate** nos facilita algumas operações que já existiam no base **R** e abre a possibilidade de outras que não haviam.



Transformação de números e strings em datas (1)
========================================================
incremental: true
class: small-code

- ** DD/MM/YYYY estar em número ou string não é a mesma coisa que estar no formato de data !!**

- o **R** possui uma classe específica para indicar datas

- Dito isso, ...

- Algumas funções interessantes são: **ymd(), ymd_hms, dmy(), dmy_hms, mdy()**, etc. ``??lubridate``. 


```{r}
library(lubridate)
ymd(20101215)

mdy("4/1/17")
```

- Você pode ir variando as letras das funções acima, dependendo de como seus dados estão organizados.

Transformação de números e strings em datas (2)
========================================================
incremental: true
class: small-code


A informação mais completa de data-hora que você pode ter no **R** é:

```{r}
arrive <- ymd_hms("2011-06-04 12:00:00", tz = "Pacific/Auckland")
arrive
#> [1] "2011-06-04 12:00:00 NZST"
leave <- ymd_hms("2011-08-10 14:00:00", tz = "Pacific/Auckland")
leave

# help(ymd_hms)

# para verificar as timezone disponíveis:
#str_subset(OlsonNames(), "Brazil")
# ou grep("Brazil", OlsonNames(), )

```


Extração de partes de data e tempo (1)
========================================================
incremental: true
class: small-code

**year(), month(), mday(), hour(), minute() and second():**

```{r}
bday <- dmy("02/01/1984")
month(bday)
month(bday, label=TRUE)

wday(bday)
wday(bday, label = TRUE)


year(bday) <- 2016
wday(bday, label = TRUE)


```



Extração de partes de data e tempo (2)
========================================================
incremental: true
class: small-code

```{r}
now()

today()

second(arrive)

second(arrive) <- 25
arrive

second(arrive) <- 0
```


Lidando com fuso-horários (time zones):
========================================================
incremental: true
class: small-code


```{r}
time <- ymd_hms("2010-12-13 15:30:30")
time


# Diz a hora que seria "time" em outro fuso
with_tz(time, "America/Chicago")


# Mantém o print da hora, mas muda região
force_tz(time, "America/Chicago")

```

<!-- mostrar um rleogio mundial para verificar a hora correta -->

Intervalos de tempo (1)
========================================================
incremental: true
class: small-code

- Você pode salvar intervalos de tempo em **lubridate** como uma classe **Interval**;
- Isso nos permite as criar as seguintes operações:


```{r}
# Primeiro, criamos um intervalo:
auckland <- interval(arrive, leave) 
auckland
#> [1] 2011-06-04 12:00:00 NZST--2011-08-10 14:00:00 NZST
auckland <- arrive %--% leave
auckland
```


Intervalos de tempo (2)
========================================================
incremental: true
class: small-code

E podemos verificar por exemplo se esse intervalo faz **overlap** (sobrepõe) com algum outro intervalo que já temos.

```{r}
jsm <- interval(ymd(20110720, tz = "Pacific/Auckland"), ymd(20110831, tz = "Pacific/Auckland"))
jsm

# há sobreposição?
int_overlaps(jsm, auckland)

# quando ocorre sobreposição?
setdiff(auckland, jsm)
```

Outras funções que lidam com intervalos são: **int_start, int_end, int_flip, int_shift, int_aligns, union, intersect, setdiff e %within%**.


Operações aritméticas com data e horas (1)
========================================================
incremental: true
class: small-code


- Intervalos são um tipo específico de espaço de tempo;
- Além deles, **lubridate** disponibiliza outras duas classes genéricas para trabalharmos com espaços de tempo: **Durations** e **Periods**. 

```{r}
minutes(2) ## period

dminutes(2) ## duration

```



Operações aritméticas com data e horas (2)
========================================================
incremental: true
class: small-code

- Por que 2 classes? 

- **Durations** vão sempre gerar resultados precisos em termos de **tempo**, considerando, por exemplo, se o ano é bissexto ou não;

- **Periods**, por sua vez, vão se basear na *number line*, desconsiderando detalhes como anos bissextos etc. 

- Ambas as classes serão úteis para fazermos **operações aritméticas** com datas, dependendo do nosso objetivo.


Operações aritméticas com data e horas (3)
========================================================
incremental: true
class: small-code

```{r}
leap_year(2011) ## regular year

leap_year(2012) ## leap year

ymd(20120101) + dyears(1)
# dyears(1) sempre somará considerando se o ano é bissexto ou não

ymd(20120101) + years(1)

```

- **Durations** foi "honesta" na presença do ano bissexto, o que resulta em um dia a menos na soma, devido ao dia a mais em fevereiro.


Operações aritméticas com data e horas (4)
========================================================
incremental: true
class: small-code

Para saber quanto tempo em dias, semanas ou minutos você passou no seu compromisso em Auckland:

```{r}
auckland / ddays(1)

auckland / dweeks(1)

auckland / dminutes(1)

```

Para não termos que ficar trabalhando com frações de meses ou semanas por exemplo, podemos utilizar módulo:

```{r}
auckland %/% months(1)

auckland %% months(1)

```


Operações aritméticas com data e horas (5)
========================================================
incremental: true
class: small-code


Outros exemplos:

```{r}
x <- dmy(02011984)

year(x) + 34

day(x) -1

month(x)*2
```

Mais detalhes sobre lubridate em <http://lubridate.tidyverse.org>.


FIM
========================================================
incremental: false
class: small-code

OBRIGADO!!