Análise de Dados em R (FNDE) - Módulo 1
Sessão 3 - Criação e Manipulação de  Objetos no R
========================================================
author: Allan Vieira
date: janeiro de 2018
width: 1440
height: 900
<style>
.small-code pre code {
  font-size: 1em;
}
</style>
<!-- para trazer codigos em caixas menores: -->
<!-- https://stackoverflow.com/questions/25612385/code-box-size-and-font-size-in-rpres -->

Objetivos desta Sessão
========================================================
incremental: true
<br />
- Conhecer os principais objetos utilizados no R;
</br>
</br>
- Manipular esses objetos.
</br>
</br>
- **OBS:** há algumas regras para atribuir nomes aos objetos no R.

Conceituação
========================================================
incremental: true
<br />
<br />
- Tudo (ou quase tudo) no R são objetos !
<br />
<br />
- Objetos: **vetores**, **matrizes**, **dataframes**, **listas** e **funções**.

Vetores - Definição
========================================================
incremental: true
<br />
<br />
- são arrays **unidimensionais** (sequências unidimensionais);
<br />
<br />
- tipos: numéricos, strings, expressões lógicas;
<br />
<br />
- **OBS:** os elementos só podem ser de um único tipo.

Vetores - Exemplo
========================================================
incremental: true
Vetor numérico:
```{r,echo=FALSE}
v1 <- head(iris[,1]); v1
```
Vetor de strings:
```{r,echo=FALSE}
v2 <- rep(c("R", "FNDE"), 10); v2
```

- **Atenção:** Strings são declaradas com aspas duplas **OU** simples; output será sempre com aspas dupla.

***
Vetor lógico:
```{r,echo=FALSE}
v3 <- c(rep(TRUE,3), FALSE,rep(TRUE,2), rep(FALSE,4)); v3
```


Matrizes - Definição
========================================================
incremental: true
<br />
<br />
- são arrays **Bidimensionais**, com coleção de vetores (linhas ou colunas) do mesmo tipo;
<br />
<br />
- tipos: numéricos, strings, expressões lógicas;
<br />
<br />
- **OBS:** todos os vetores da coleção são do mesmo tipo e tamanho.

Matrizes - Exemplo
========================================================
incremental: true
Matriz numérica:
```{r,echo=FALSE}
m1 <- matrix(runif(2^2), 2); m1
```

<br />
<br />
Matriz de strings:
```{r, echo=FALSE}
m2 <- matrix(rep(c("R", "FNDE"), 5), ncol=2); m2
```

***
Matriz lógica:
```{r, echo=FALSE}
m3 <- matrix(rep(c(TRUE, TRUE, FALSE, TRUE), 2^2), ncol=4); m3
```

<br /> 
- Atenção para como são representados os índices de linhas e colunas das matrizes!!

Dataframes - Definição
========================================================
incremental: true
<br />
<br />
- são objetos parecidos com uma matriz, com a diferença de que as colunas ou linhas podem ser de tipos diferentes;
<br />
<br />
- **OBS:** é o principal objeto utilizado para armazenar tabelas de dados no R.

Dataframes - Exemplo
========================================================
incremental: true
```{r,echo=FALSE}
df1 <- head(iris, 10); df1
```


Funções - Definição
========================================================
incremental: true
<br />
<br />
- são um conjunto de procedimentos que recebem nenhum, um ou mais parâmetros, como *input*, realizam um cálculo ou procedimento e retornam um resultado para o usuário;
<br />
<br />
- **OBS:** até funções são tratadas como objetos pelo R.

Funções - Exemplo
========================================================
incremental: true
```{r}
meu_cubo <- function(x){
  out <- x^3
  return(out)
}
meu_cubo
```

Listas - Definição
========================================================
incremental: true
<br />
<br />
- são o tipo mais amplo de objeto, que pode reunir coleções de dataframes, vetores, matrizes, funções ou ainda de todos esses tipos juntos;
<br />
<br />
- **OBS:** Como os objetos de uma lista não precisam ser do mesmo tipo, também não há a necessidade de que sejam do mesmo tamanho. Isso, muitas vezes, ajuda na manipulação de dados.

Listas - Exemplo
========================================================
incremental: true
class: small-code

- Consegue identificar o tipo de cada objeto desta lista?

```{r,echo=FALSE}
minha_lista <- list(v2, head(iris, 5), m1, meu_cubo)
minha_lista
```

- Atenção para como são representados os índices dos elementos dentro de uma lista e os índices dos objetos dentro destes elementos!!

Tipo de objeto e forma de armazenamento
========================================================
incremental: true
- Para saver o tipo de objeto que você tem:
  + str(objeto);
  + class(objeto);
<br />
<br />
- Para saber como ele está sendo armazenado na memória (importante para objetos numéricos):
  + mode(objeto);
  + typeof(objeto).

Criação, indexação e manipulação de objetos
========================================================
incremental: true
<!-- class: small-code -->
- Para **atribuir** valores a um objeto use "**<-**":
```{r,eval=FALSE}
x <- 4
# ou
x = 4
```
<br />
- Para **concatenar** vários valores e salvá-los em um objeto, use a função "**c(objeto1, objeto2, ...)**":
```{r,eval=FALSE}
x <- c(4,5,6,7,8)
# ou
x = c(4,5,6,7,8)
```

***
- Para **extrair** um ou vários elementos de um objeto, use "**objeto[índice]**":
```{r,eval=FALSE}
x[3] # extraindo 3º elemento do vetor x

x[c(1,4)] # extraindo 1º e 4º elementos do vetor x
```
- Treine agora com todos os objetos, reproduzindo os elementos da apostila.
- Lembre-se de utilizar a ajuda do R caso se depare com uma nova função !! 
- Salve seus códigos num script !!
- Leia sobre a indexação usando $.
- Atente para regras relativas aos nomes dos objetos!!

Criação, indexação e manipulação de objetos - Exemplos (1)
========================================================
class: small-code

Criação de alguns objetos:

```{r}
vetor1 <- c(12, 43.8, NA, 67)
vetor2 <- c(2, 90, 360, 23) 
vetor3 <- c("BB", "CEF", "CEF", "BB")

df <- data.frame("valor"=vetor1, "atraso"=vetor2, "banco"=vetor3)

m <- matrix(c(1,2,3,4,5,6,7,8,9,10), ncol=2)

m2 <- matrix(c(1,2,3,4,5,6,7,8,9,10), ncol=2, byrow=TRUE)

minha_lista <- list(m2, vetor1, df)

```

Indexação:

```{r}
vetor1[3]

vetor2[c(1,3)]

df[,2]
```

***

```{r}

df$atraso

df[,"atraso"]

df[-3,]

m[1,2]

minha_lista[[2]]

minha_lista[[2]][1] # ou  minha_lista[[c(2,1)]]



```


Funções importantes (1) - Funções matemáticas
========================================================
incremental: true
class: small-code

- Há algumas funções que serão usadas muitas vezes ao se analisar dados com R;
- Elas normalmente receberão como parâmetros algum dos objetos que vimos anteriormente;

```{r}
# criando dados fictícios:
vetor1 <- c(12, 43.8, NA, 67)
vetor2 <- c(2, 90, 360, 23) 
vetor3 <- c("BB", "CEF", "CEF", "BB")

df <- data.frame("valor"=vetor1, "atraso"=vetor2, "banco"=vetor3)

m <- matrix(c(1,2,3,4,5,6,7,8,9,10), ncol=2)
```

```{r}
mean(vetor2) # média

mean(df[,2]) 

```

***

```{r}
sum(df[,1]) # soma

sum(df[,1], na.rm=TRUE) # soma com missig value

colMeans(df[, c(1,2)], na.rm=TRUE) # só p/ colunas numéricas

rowMeans(m)

colSums(m)

rowSums(df[,c(1,2)])

```

Funções importantes (2) - Nomes, tamanhos e ordenação 
========================================================
incremental: true
class: small-code

```{r}
colnames(df)

names(vetor1)

length(vetor3)

ncol(df) # nro colunas

nrow(m) # nro linhas

max(m) # max
```

***

```{r}
min(vetor2) # min

sort(df[,2]) # ordenar os valores

sort(m[,2], decreasing = TRUE) # forma decrescente

sort(vetor3) # também ordena alfabeticamente

order(df[,2]) # ordena e retorna os índices originais dos elementos dentro da ordenação

rank(vetor2) # atribui postos aos valores de um objeto sem ordenar a poisção da saída 
```


Funções importantes (3)
========================================================
incremental: true
class: small-code
- Utilidades 
```{r,eval=FALSE}
## listar e remover objetos
ls() # listar
rm(objeto) # remover
```

- Sequências
```{r}
1:10 # sequencia de 1 a 10

seq(from=1,to=10,by=2) # sequenciade 1 até 10 com intervalos de 2 em 2

seq(125, 155, 5) # sequencia de 125 a 155 com intervalos de 5 em 5

seq(0.1, 0.5, 0.05) # de 0.1 ate 0.5 de 0.05 em 0.05
```

***

- Repetições:

```{r}
rep(x=5,times=10) # repetir o numero 5, 10 vezes

rep("FNDE", 4) # repete a palavra FNDE 4 vezes

rep(vetor1, 2) # repete o vetor inteiro duas vezes

rep(df[,2], each=3 ) # repete cada elemento 3 vezes

rep(c("três", "dois", "um", "quatro"), c(3,2,1,4)) # primeiro parametro 
#...indica quais palavras devem ser repetidas e segundo parametro
#... indica quantas vezes cada uma será repetida
```

Funções importantes (4)
========================================================
incremental: true
class: small-code
- "Colagem" e junção
```{r}
paste("FIES", "FNDE", "R", sep="")
paste("FIES", "FNDE", "R", sep="-")
paste(1:3, c("FNDE","MEC"), 1:2,  sep="/") # !!reciclagem!!

paste(c("A", "S", "D", "F"), 
      c("W", "X", "Y", "Z")) # mesmo que sep=" "

paste(c("A", "S", "D", "F"), 
      c("W", "X", "Y", "Z"), collapse = '') # produz uma úncia string

```

***

- Aleatorização e sorteio
```{r}
sample(x=vetor1, size=2, replace=FALSE) # sorteia dois elementos do vetor1 sem repetição

sample(x=1:5, size=4, replace=TRUE) # sorteia 4 elementos da sequencia de 1 a 5...com possibilidade de repetição

```


========================================================
incremental: true
class: small-code
![alt text](./img/fim.png)