Análise de Dados em R (FNDE) - Módulo 1
Sessão 4 - Operadores lógicos e comandos de decisão
========================================================
author: Allan Vieira
date: janeiro de 2018
width: 1440
height: 900
<style>
.small-code pre code {
  font-size: 1em;
}
</style>
<!-- para trazer codigos em caixas menores: -->
<!-- https://stackoverflow.com/questions/25612385/code-box-size-and-font-size-in-rpres -->

Objetivos desta Sessão
========================================================
incremental: true
<br />
- Conhecer noções básicas de lógica de programação;
</br>
</br>
- Conhecer algumas funções "lógicas" no R.

Conceituação
========================================================
incremental: true

- técnicas de lógica de programação são extremamente úteis para resolver diversos problemas em análise de dados;

> **R** possui operadores lógicos e relacionais que vão compor uma determinada expressão lógica ou condição

<br/>

> "Condição" é uma expressão que pode ser VERDADEIRA ou FALSA

Operadores Relacionais
========================================================

<br />
<center>
```{r,echo=FALSE, results='asis'}
df <- data.frame("operador" = c("==","!=",">=",">","<","<="),
                 "ação" = c("igual a","diferente de","maior ou igual a", "maior que", "menor que", "menor ou igual a") )

knitr::kable(df, format = "html")
#help(kable)
# library(xtable)
# print(xtable(df, type = "html", include.rownames = F))

```


Operadores Lógicos
========================================================

<br />
<center>
```{r,echo=FALSE, results='asis'}
df <- data.frame("operador" = c("||","&&","!","|","&"),
                 "ação" = c("OU lógico (para 1 elemento)","E lógico (para 1 elemento)","negação", "OU lógico (funcionamento vetorial)", "E lógico (funcionamento vetorial)") )

knitr::kable(df, format = "html")
#help(kable)
# library(xtable)
# print(xtable(df, type = "html", include.rownames = F))

```


Operadores Lógicos - Exemplos
========================================================
incremental: true
class: small-code

```{r}
# com números:
3 > 2

23 < 15

7 == 5

7 >= 7 

8 <= 3

4 != 4 
```

***

```{r}
# com vetores:
x <- c(1,2,9,4,5) 
y <- c(1,2,6,7,8)

x > y

x < y

x == y

x >= y

x != y
```


Funções Lógicas "mão na roda" do R (1)
========================================================
incremental: true
class: small-code

- Vamos criar os seguintes objetos:
```{r}
vetor1 <- c(12, 43.8, NA, 67, 12)
vetor2 <- c(2, 90, 360, 23, 2) 
vetor3 <- c("BB", "CEF", "CEF", "BB", "BB")
vetor4 <- c("CEF", "BB", "CEF", "BB", "CEF" )
df <- data.frame("valor"=vetor1, "atraso"=vetor2, "banco_atual"=vetor3,"banco_anterior"=vetor4)

```

```{r}
# obtendo índices para uma condição
which(vetor2 > 60) # poderia usar ==, <=, ...

# trazendo os valores que atendem a condição
vetor2[which(vetor2 > 60)]

which.min(vetor1) # índice do valor mínimo

which.max(df$atraso) # índice do valor máximo

# toda a linha do aluno com maior tempo de atraso
df[which.max(df$atraso), ]

```

***

```{r}

# todas as linhas, MENOS a do com maior tempo de atraso
df[-which.max(df$atraso), ]

# saber se existem repetições no dataframe
any( duplicated(df) )

# quais linhas estão repetidas?
duplicated(df)
df[duplicated(df), ]

# ficar só com as linhas que não se repetem
unique(df)

```

Funções Lógicas "mão na roda" do R (2)
========================================================
incremental: true
class: small-code

Vamos criar os seguintes objetos:

```{r}
PTRES1 <- c( 128435, 129030, 087432, 129315 , 128414)

PTRES2 <- c( 128435, 129130, 087432, 129325 , 128414 )

```


```{r}
setdiff(PTRES1, PTRES2) # diferença de conjuntos
intersect(PTRES1, PTRES2) # interseção

which(PTRES1 %in% PTRES2) # índices da interseção

which(!PTRES1 %in% PTRES2) # índices da diferença
```



Expressões Condicionais - Definição
========================================================
incremental: true
- As expressões condicionais **if** ("SE") e **else** ("SENÃO") são MUITO utilizadas em qualquer linguagem de programação.

- Estrutura mais utilizada é:

![alt text](./img/if_else.PNG)

- Para objetos que tem comprimento 1, deve-se utilizar a estrutura acima.

- Quando se deeseja percorrer todas as entradas de um vetor deve usar a função específica do R **ifelse(  )**:
```{r, eval=FALSE}
ifelse(expressão_lógica_no_vetor, o que_fazer_caso_TRUE, o_que_fazer_caso_FALSE)
```


Expressões Condicionais - Exemplo 1
========================================================
incremental: true

```{r,echo=TRUE}
## Condições:
# testando um único valor
a = 10

if (a == 10){
  print("o resultado foi verdadeiro")
} else {
  print("o resultado foi falso")
}
```

***
```{r}
a = 15
b = 7

if (a == 10 && b < 10 ){
  y <- c(1, "verdadeiro")
} else {
  y <- c(0, "falso")
}
y
# brinque de alterar os valores de "a" e "b" e os operadores relacionais 
# faça outros tipos de atribuição também
```


Expressões Condicionais - Exemplo 2
========================================================
incremental: true
class: small-code

```{r}
# trabalhando com vetores
x <- c("cat", "dog", "bird", "tree", "leaf", "log","shark","chicken")

ifelse(x == "leaf", "eba!", "ahhh!")

# ifelse com atribuições
( resultado <- ifelse(x == "leaf", "eba!", "ahhh!") )

# usando operadores lógicos para vetores
( resultado <- ifelse(x == "leaf" | x == "dog", "eba!", "ahhh!") )

# lembre-se que um único & e um único | são os operadores lógicos 
#... que devem ser utilizados quando temos vetores.
# senão, o R só avalia a condição para o primeiro elemento do vetor!!
```

***

- Já pensou em como criar uma coluna nova num dataframe já existente?
```{r}
df$col <- ifelse(df$banco_atual == "BB", 1, 0)
df
```


Exercício
========================================================
incremental: true
class: small-code
- Crie o data-frame:
```{r, eval=FALSE}
col1 <- c(2356.89, 4377.8, 5200, 350.00, 50, 4377.8, 5200)
col2 <- c(12, 24, 15, 23, 45, 24, 15) 
col3 <- c("BB", "CEF", "CEF", "BB", "BB", "CEF", "CEF")
col4 <- c("utilização", "utilização", "amortização", "carência", "utilização", "utilização", "amortização")
( df <- data.frame("valor"=col1, "atraso"=col2, "banco"=col3,"fase"=col4) )
```

- **Objetivo:** Corrigir os valores devidos pelos alunos.

- **Tarefas:**

- Limpe os dados (elimine linhas repetidas);

- Crie uma nova coluna chamada "taxa_juros_mes" neste mesmo dataframe, em que:
  + se o aluno está em fase de utilização OU carência, incide taxa de **0.015** (1.5 %);
  + se está em fase de amortização, incide taxa de **0.03** (3 %);

***

- Crie uma nova coluna chamada "novo_valor", que é o resultado da aplicação da taxa de juros (composta) no valor devido (coluna "valor"), considerando o nro de dias em atraso.

- Calcule a diferença entre o valor total devido depois e antes da aplicação da taxa.

OBS: A fórmula da taxa de juros compostos é:    

$$ M = C(1+i)^{t} $$


